<?php
/**
 * Advanced Sitemap Generator for DONAN22.com
 * Saves sitemap to file: sitemap.xml
 * Run this script periodically via cron or manually
 * Usage: php generate_sitemap.php or access via browser
 */

require_once __DIR__ . '/../config_modern.php';

// Start output buffering
ob_start();

// XML Header
echo '<?xml version="1.0" encoding="UTF-8"?>' . PHP_EOL;
echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"' . PHP_EOL;
echo '        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' . PHP_EOL;
echo '        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9' . PHP_EOL;
echo '        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">' . PHP_EOL;
echo '<!-- Generated by DONAN22 Sitemap Generator on ' . date('Y-m-d H:i:s') . ' -->' . PHP_EOL;
echo PHP_EOL;

// Function to add URL to sitemap
function addUrl($loc, $lastmod = null, $priority = 0.5, $changefreq = 'weekly') {
    echo '<url>' . PHP_EOL;
    echo '  <loc>' . htmlspecialchars($loc, ENT_XML1, 'UTF-8') . '</loc>' . PHP_EOL;
    
    if ($lastmod) {
        // Format lastmod in W3C Datetime format (ISO 8601)
        $date = new DateTime($lastmod);
        echo '  <lastmod>' . $date->format('c') . '</lastmod>' . PHP_EOL;
    }
    
    echo '  <priority>' . number_format($priority, 2) . '</priority>' . PHP_EOL;
    echo '  <changefreq>' . $changefreq . '</changefreq>' . PHP_EOL;
    echo '</url>' . PHP_EOL;
}

$urlCount = 0;

try {
    // Clean SITE_URL (remove trailing slash)
    $baseUrl = rtrim(SITE_URL, '/');
    
    // ===================================
    // 1. HOMEPAGE - Highest Priority
    // ===================================
    addUrl($baseUrl . '/', date('Y-m-d H:i:s'), 1.00, 'daily');
    $urlCount++;

    // ===================================
    // 2. STATIC PAGES - High Priority
    // ===================================
    $staticPages = [
        ['url' => 'about.php', 'priority' => 0.80, 'changefreq' => 'monthly'],
        ['url' => 'contact.php', 'priority' => 0.80, 'changefreq' => 'monthly'],
        ['url' => 'categories.php', 'priority' => 0.80, 'changefreq' => 'weekly'],
    ];

    foreach ($staticPages as $page) {
        addUrl(
            $baseUrl . '/' . $page['url'],
            date('Y-m-d H:i:s'),
            $page['priority'],
            $page['changefreq']
        );
        $urlCount++;
    }

    // ===================================
    // 3. CATEGORIES - Medium-High Priority
    // ===================================
    // Check if deleted_at column exists
    $columns = $pdo->query("SHOW COLUMNS FROM categories")->fetchAll(PDO::FETCH_COLUMN);
    $hasDeletedAt = in_array('deleted_at', $columns);
    
    $whereClause = $hasDeletedAt ? "WHERE deleted_at IS NULL" : "WHERE 1=1";
    
    $stmt = $pdo->prepare("
        SELECT 
            slug, 
            updated_at, 
            created_at,
            name
        FROM categories 
        $whereClause
        ORDER BY name ASC
    ");
    $stmt->execute();
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);

    foreach ($categories as $category) {
        $lastmod = $category['updated_at'] ?? $category['created_at'] ?? date('Y-m-d H:i:s');
        
        // Use clean URL format (SEO-friendly)
        addUrl(
            $baseUrl . '/category/' . $category['slug'],
            $lastmod,
            0.70,
            'weekly'
        );
        $urlCount++;
    }

    // ===================================
    // 4. POSTS/ARTICLES - Medium Priority
    // ===================================
    // Get latest 1000 posts (adjust limit as needed)
    // Check if deleted_at column exists in posts table
    $postColumns = $pdo->query("SHOW COLUMNS FROM posts")->fetchAll(PDO::FETCH_COLUMN);
    $postHasDeletedAt = in_array('deleted_at', $postColumns);
    
    $postWhereClause = $postHasDeletedAt ? "AND p.deleted_at IS NULL" : "";
    
    $stmt = $pdo->prepare("
        SELECT 
            p.slug, 
            p.updated_at, 
            p.created_at,
            p.title,
            c.slug as category_slug
        FROM posts p
        LEFT JOIN categories c ON p.category_id = c.id
        WHERE p.status = 'published' 
        $postWhereClause
        ORDER BY p.created_at DESC 
        LIMIT 1000
    ");
    $stmt->execute();
    $posts = $stmt->fetchAll(PDO::FETCH_ASSOC);

    foreach ($posts as $post) {
        $lastmod = $post['updated_at'] ?? $post['created_at'] ?? date('Y-m-d H:i:s');
        
        // Calculate priority based on recency
        $daysOld = (time() - strtotime($post['created_at'])) / 86400;
        $priority = 0.60; // Base priority
        
        if ($daysOld < 7) {
            $priority = 0.70; // New posts get higher priority
        } elseif ($daysOld < 30) {
            $priority = 0.65;
        }
        
        // Add post URL
        addUrl(
            $baseUrl . '/post/' . $post['slug'],
            $lastmod,
            $priority,
            'monthly'
        );
        $urlCount++;
    }

} catch (PDOException $e) {
    // Log error but continue
    error_log('Sitemap Generator Error: ' . $e->getMessage());
    echo '<!-- Error: ' . htmlspecialchars($e->getMessage(), ENT_XML1, 'UTF-8') . ' -->' . PHP_EOL;
}

// Close XML
echo '</urlset>';

// Get the generated content
$sitemapContent = ob_get_clean();

// ===================================
// SAVE TO FILE
// ===================================
// Save to ROOT folder for public access (not seo/ subfolder)
$sitemapFile = dirname(__DIR__) . '/sitemap.xml';
$success = file_put_contents($sitemapFile, $sitemapContent);

if ($success !== false) {
    $message = "âœ“ Sitemap generated successfully!";
    $message .= "\nâœ“ Total URLs: " . $urlCount;
    $message .= "\nâœ“ File size: " . number_format(strlen($sitemapContent)) . " bytes";
    $message .= "\nâœ“ Saved to: " . $sitemapFile;
    $message .= "\nâœ“ Generated at: " . date('Y-m-d H:i:s');
    
    // If accessed via browser, show nice output
    if (php_sapi_name() !== 'cli') {
        header('Content-Type: text/html; charset=utf-8');
        echo '<!DOCTYPE html>';
        echo '<html><head><title>Sitemap Generated</title>';
        echo '<style>body{font-family:Arial;padding:40px;background:#f5f5f5;}';
        echo '.success{background:#d4edda;color:#155724;padding:20px;border-radius:8px;border:1px solid #c3e6cb;}';
        echo 'pre{background:#fff;padding:15px;border-radius:5px;overflow:auto;}</style></head><body>';
        echo '<div class="success"><h2>ðŸŽ‰ Sitemap Generated Successfully!</h2>';
        echo '<pre>' . htmlspecialchars($message) . '</pre>';
        echo '<p><a href="sitemap.xml" target="_blank">View Sitemap XML</a> | ';
        echo '<a href="/">Back to Home</a></p>';
        echo '</div></body></html>';
    } else {
        // CLI output
        echo $message . PHP_EOL;
    }
    
    // Log success
    error_log('Sitemap generated: ' . $urlCount . ' URLs');
    
} else {
    $error = "âœ— Error: Could not write sitemap file!";
    
    if (php_sapi_name() !== 'cli') {
        header('Content-Type: text/html; charset=utf-8');
        echo '<!DOCTYPE html>';
        echo '<html><head><title>Sitemap Error</title></head><body>';
        echo '<div style="background:#f8d7da;color:#721c24;padding:20px;border-radius:8px;">';
        echo '<h2>Error Generating Sitemap</h2>';
        echo '<p>' . $error . '</p>';
        echo '<p>Check file permissions on: ' . $sitemapFile . '</p>';
        echo '</div></body></html>';
    } else {
        echo $error . PHP_EOL;
    }
    
    error_log('Sitemap generation failed: Cannot write file');
}
?>
