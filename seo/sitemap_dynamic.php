<?php
/**
 * DONAN22.COM - Advanced Dynamic Sitemap Generator
 * =================================================
 * Generates complete XML sitemap with:
 * - All posts/articles
 * - All categories  
 * - All static pages
 * - Pagination support
 * - Automatic priority calculation
 * - Image sitemap support
 * - Last modified dates
 * 
 * @author DONAN22 Dev Team
 * @version 2.0
 * @date 2025-10-10
 */

require_once __DIR__ . '/../config_modern.php';

// Set timezone
date_default_timezone_set('Asia/Jakarta');

// Output XML header
header('Content-Type: application/xml; charset=UTF-8');

// Start output buffering
ob_start();

// XML Declaration
echo '<?xml version="1.0" encoding="UTF-8"?>' . PHP_EOL;
echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"' . PHP_EOL;
echo '        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"' . PHP_EOL;
echo '        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' . PHP_EOL;
echo '        xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9' . PHP_EOL;
echo '        http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">' . PHP_EOL;
echo '<!-- Generated by DONAN22.com Advanced Sitemap Generator -->' . PHP_EOL;
echo '<!-- Generated at: ' . date('Y-m-d H:i:s T') . ' -->' . PHP_EOL;
echo PHP_EOL;

/**
 * Add URL to sitemap
 */
function addUrl($loc, $lastmod = null, $priority = 0.5, $changefreq = 'weekly', $images = []) {
    global $urlCount;
    
    echo '  <url>' . PHP_EOL;
    echo '    <loc>' . htmlspecialchars($loc, ENT_XML1 | ENT_QUOTES, 'UTF-8') . '</loc>' . PHP_EOL;
    
    if ($lastmod) {
        // Format as W3C Datetime (ISO 8601)
        $date = new DateTime($lastmod);
        echo '    <lastmod>' . $date->format('c') . '</lastmod>' . PHP_EOL;
    }
    
    echo '    <changefreq>' . $changefreq . '</changefreq>' . PHP_EOL;
    echo '    <priority>' . number_format($priority, 2) . '</priority>' . PHP_EOL;
    
    // Add images if provided
    foreach ($images as $image) {
        echo '    <image:image>' . PHP_EOL;
        echo '      <image:loc>' . htmlspecialchars($image, ENT_XML1 | ENT_QUOTES, 'UTF-8') . '</image:loc>' . PHP_EOL;
        echo '    </image:image>' . PHP_EOL;
    }
    
    echo '  </url>' . PHP_EOL;
    
    $urlCount++;
}

/**
 * Calculate priority based on post age and views
 */
function calculatePriority($createdAt, $views = 0) {
    $daysOld = (time() - strtotime($createdAt)) / 86400;
    
    // Base priority
    $priority = 0.50;
    
    // Boost for new content
    if ($daysOld < 7) {
        $priority = 0.90;
    } elseif ($daysOld < 30) {
        $priority = 0.80;
    } elseif ($daysOld < 90) {
        $priority = 0.70;
    } elseif ($daysOld < 180) {
        $priority = 0.60;
    }
    
    // Small boost for popular content
    if ($views > 1000) {
        $priority = min(1.0, $priority + 0.10);
    } elseif ($views > 500) {
        $priority = min(1.0, $priority + 0.05);
    }
    
    return $priority;
}

$urlCount = 0;
$errors = [];

// Clean SITE_URL (remove trailing slash)
$baseUrl = rtrim(SITE_URL, '/');

try {
    // ========================================
    // 1. HOMEPAGE - Highest Priority
    // ========================================
    addUrl($baseUrl . '/', date('Y-m-d H:i:s'), 1.00, 'daily');
    addUrl($baseUrl . '/index.php', date('Y-m-d H:i:s'), 0.90, 'daily');
    
    // ========================================
    // 2. IMPORTANT STATIC PAGES
    // ========================================
    $staticPages = [
        ['url' => 'categories.php', 'priority' => 0.85, 'changefreq' => 'daily'],
        ['url' => 'about.php', 'priority' => 0.80, 'changefreq' => 'monthly'],
        ['url' => 'contact.php', 'priority' => 0.80, 'changefreq' => 'monthly'],
        ['url' => 'search.php', 'priority' => 0.70, 'changefreq' => 'weekly'],
    ];
    
    foreach ($staticPages as $page) {
        if (file_exists(__DIR__ . '/../' . $page['url'])) {
            addUrl(
                $baseUrl . '/' . $page['url'],
                date('Y-m-d H:i:s', filemtime(__DIR__ . '/../' . $page['url'])),
                $page['priority'],
                $page['changefreq']
            );
        }
    }
    
    // ========================================
    // 3. ALL CATEGORIES
    // ========================================
    // Check if deleted_at exists
    $columns = $pdo->query("SHOW COLUMNS FROM categories")->fetchAll(PDO::FETCH_COLUMN);
    $hasDeletedAt = in_array('deleted_at', $columns);
    $whereClause = $hasDeletedAt ? "WHERE deleted_at IS NULL" : "WHERE 1=1";
    
    $stmt = $pdo->prepare("
        SELECT 
            id,
            slug, 
            name,
            description,
            updated_at, 
            created_at
        FROM categories 
        $whereClause
        ORDER BY name ASC
    ");
    $stmt->execute();
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($categories as $category) {
        $lastmod = $category['updated_at'] ?? $category['created_at'] ?? date('Y-m-d H:i:s');
        
        // Main category page - both URL formats
        addUrl(
            $baseUrl . '/category/' . $category['slug'],
            $lastmod,
            0.80,
            'daily'
        );
        
        addUrl(
            $baseUrl . '/category.php?slug=' . $category['slug'],
            $lastmod,
            0.75,
            'daily'
        );
        
        // Get post count for pagination
        $countStmt = $pdo->prepare("SELECT COUNT(*) FROM posts WHERE category_id = ? AND status = 'published'");
        $countStmt->execute([$category['id']]);
        $postCount = $countStmt->fetchColumn();
        
        // Add paginated category pages
        $postsPerPage = 12;
        $totalPages = ceil($postCount / $postsPerPage);
        
        for ($page = 2; $page <= min($totalPages, 10); $page++) {
            addUrl(
                $baseUrl . '/category.php?slug=' . $category['slug'] . '&page=' . $page,
                $lastmod,
                0.60,
                'weekly'
            );
        }
    }
    
    // ========================================
    // 4. ALL POSTS/ARTICLES
    // ========================================
    $postColumns = $pdo->query("SHOW COLUMNS FROM posts")->fetchAll(PDO::FETCH_COLUMN);
    $postHasDeletedAt = in_array('deleted_at', $postColumns);
    $postHasViews = in_array('views', $postColumns);
    
    $postWhereClause = $postHasDeletedAt ? "AND p.deleted_at IS NULL" : "";
    $viewsSelect = $postHasViews ? "p.views," : "0 as views,";
    
    $stmt = $pdo->prepare("
        SELECT 
            p.id,
            p.slug, 
            p.title,
            p.featured_image,
            $viewsSelect
            p.updated_at, 
            p.created_at,
            c.slug as category_slug
        FROM posts p
        LEFT JOIN categories c ON p.category_id = c.id
        WHERE p.status = 'published' 
        $postWhereClause
        ORDER BY p.created_at DESC 
        LIMIT 2000
    ");
    $stmt->execute();
    $posts = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($posts as $post) {
        $lastmod = $post['updated_at'] ?? $post['created_at'] ?? date('Y-m-d H:i:s');
        $priority = calculatePriority($post['created_at'], $post['views'] ?? 0);
        
        // Determine changefreq based on age
        $daysOld = (time() - strtotime($post['created_at'])) / 86400;
        $changefreq = $daysOld < 30 ? 'weekly' : 'monthly';
        
        // Prepare images array
        $images = [];
        if (!empty($post['featured_image'])) {
            $imagePath = $post['featured_image'];
            if (strpos($imagePath, 'http') === false) {
                $imagePath = $baseUrl . '/uploads/' . basename($imagePath);
            }
            $images[] = $imagePath;
        }
        
        // Add post URL
        addUrl(
            $baseUrl . '/post/' . $post['slug'],
            $lastmod,
            $priority,
            $changefreq,
            $images
        );
    }
    
    // ========================================
    // 5. DOWNLOAD LINKS (if applicable)
    // ========================================
    try {
        // Check if downloads table exists first
        $tables = $pdo->query("SHOW TABLES LIKE 'downloads'")->fetchAll();
        
        if (!empty($tables)) {
            // Check columns
            $dlColumns = $pdo->query("SHOW COLUMNS FROM downloads")->fetchAll(PDO::FETCH_COLUMN);
            
            // Try different column name variations
            if (in_array('short_code', $dlColumns)) {
                $codeColumn = 'short_code';
            } elseif (in_array('code', $dlColumns)) {
                $codeColumn = 'code';
            } elseif (in_array('id', $dlColumns)) {
                $codeColumn = 'id';
            } else {
                throw new Exception('No suitable code column found');
            }
            
            $activeColumn = in_array('active', $dlColumns) ? 'WHERE active = 1' : 'WHERE 1=1';
            
            $downloadStmt = $pdo->prepare("
                SELECT DISTINCT $codeColumn as code, created_at
                FROM downloads
                $activeColumn
                ORDER BY created_at DESC
                LIMIT 500
            ");
            $downloadStmt->execute();
            $downloads = $downloadStmt->fetchAll(PDO::FETCH_ASSOC);
            
            foreach ($downloads as $download) {
                addUrl(
                    $baseUrl . '/go/' . $download['code'],
                    $download['created_at'],
                    0.50,
                    'monthly'
                );
            }
        }
    } catch (Exception $e) {
        // Table might not exist or have different structure, skip silently
        // Only log in debug mode
        if (isset($_GET['debug'])) {
            $errors[] = 'Downloads: ' . $e->getMessage();
        }
    }
    
} catch (PDOException $e) {
    $errors[] = 'Database error: ' . $e->getMessage();
    error_log('Sitemap Generator Error: ' . $e->getMessage());
}

// ========================================
// CLOSE XML
// ========================================
echo PHP_EOL;
echo '<!-- Total URLs: ' . $urlCount . ' -->' . PHP_EOL;
if (!empty($errors)) {
    echo '<!-- Errors encountered: -->' . PHP_EOL;
    foreach ($errors as $error) {
        echo '<!-- ' . htmlspecialchars($error, ENT_XML1, 'UTF-8') . ' -->' . PHP_EOL;
    }
}
echo '</urlset>' . PHP_EOL;

// Get content
$sitemapContent = ob_get_clean();

// ========================================
// SAVE TO ROOT sitemap.xml
// ========================================
$rootSitemapPath = dirname(__DIR__) . '/sitemap.xml';
$saveSuccess = @file_put_contents($rootSitemapPath, $sitemapContent);

// Also save a backup in seo folder
$backupPath = __DIR__ . '/sitemap_backup.xml';
@file_put_contents($backupPath, $sitemapContent);

// Log generation
$logMessage = date('Y-m-d H:i:s') . " - Sitemap generated: $urlCount URLs\n";
file_put_contents(__DIR__ . '/sitemap_generation.log', $logMessage, FILE_APPEND);

// Output the sitemap
echo $sitemapContent;

// If accessed via browser with ?debug parameter, show stats
if (isset($_GET['debug']) && DEBUG_MODE) {
    echo PHP_EOL . '<!-- DEBUG INFO:' . PHP_EOL;
    echo 'Generated at: ' . date('Y-m-d H:i:s T') . PHP_EOL;
    echo 'Total URLs: ' . $urlCount . PHP_EOL;
    echo 'File saved: ' . ($saveSuccess ? 'Yes' : 'No') . PHP_EOL;
    echo 'File size: ' . number_format(strlen($sitemapContent)) . ' bytes' . PHP_EOL;
    echo 'Memory used: ' . number_format(memory_get_peak_usage(true) / 1024 / 1024, 2) . ' MB' . PHP_EOL;
    echo '-->' . PHP_EOL;
}
?>
